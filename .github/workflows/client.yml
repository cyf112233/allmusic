name: Sync latest successful run and release2

on:
  schedule:
    # 每天触发一次。Cron 使用 UTC 时间，按需调整。
    - cron: '0 0 * * *'
  workflow_dispatch: {}

permissions:
  contents: write
  actions: read

concurrency:
  group: sync-latest-release
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      SOURCE_OWNER: Coloryr
      SOURCE_REPO: AllMusic_Client
      API_URL: https://api.github.com
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Fetch latest successful workflow run and publish release
        env:
          SOURCE_PAT: ${{ secrets.SOURCE_PAT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -euo pipefail

          OWNER="${{ env.SOURCE_OWNER }}"
          REPO="${{ env.SOURCE_REPO }}"
          API="${{ env.API_URL }}"
          TOKEN="${SOURCE_PAT}"
          GHTOKEN="${GITHUB_TOKEN}"
          TARGET_REPO="${GITHUB_REPOSITORY}"

          if [ -z "$TOKEN" ]; then
            echo "Warning: secrets.SOURCE_PAT is empty. Requests may be unauthenticated and rate-limited. It's recommended to set SOURCE_PAT in repository secrets."
          fi

          echo "Querying latest successful workflow run for $OWNER/$REPO..."
          # 获取最近的成功的 workflow runs（按时间顺序第一个就是最近的）
          # 使用 per_page=10 以防第一个被过滤或是临时结果
          if [ -n "$TOKEN" ]; then
            resp=$(curl -s -H "Authorization: token $TOKEN" "$API/repos/$OWNER/$REPO/actions/runs?status=success&per_page=10")
          else
            resp=$(curl -s "$API/repos/$OWNER/$REPO/actions/runs?status=success&per_page=10")
          fi

          run_id=$(echo "$resp" | jq -r '.workflow_runs[0].id // empty')
          if [ -z "$run_id" ]; then
            echo "No successful workflow runs found for $OWNER/$REPO. Exiting."
            exit 0
          fi

          head_sha=$(echo "$resp" | jq -r '.workflow_runs[0].head_sha // empty')
          run_number=$(echo "$resp" | jq -r '.workflow_runs[0].run_number // empty')
          created_at=$(echo "$resp" | jq -r '.workflow_runs[0].created_at // empty')
          run_name=$(echo "$resp" | jq -r '.workflow_runs[0].name // .workflow_runs[0].workflow_id // empty')

          echo "Found latest successful run: id=$run_id run_number=$run_number sha=$head_sha name='$run_name' created_at=$created_at"

          # 检查本地记录，避免重复发布
          LAST_FILE=".last_release_source_run2"
          last=""
          if [ -f "$LAST_FILE" ]; then
            last=$(cat "$LAST_FILE" | tr -d '[:space:]' || true)
          fi

          if [ "$run_id" = "$last" ]; then
            echo "Run $run_id was already released previously (matches $LAST_FILE). Skipping."
            exit 0
          fi

          # 获取 artifacts 列表并下载
          echo "Listing artifacts for run $run_id..."
          if [ -n "$TOKEN" ]; then
            artifacts_resp=$(curl -s -H "Authorization: token $TOKEN" "$API/repos/$OWNER/$REPO/actions/runs/$run_id/artifacts")
          else
            artifacts_resp=$(curl -s "$API/repos/$OWNER/$REPO/actions/runs/$run_id/artifacts")
          fi

          total_count=$(echo "$artifacts_resp" | jq -r '.total_count // 0')
          mkdir -p artifacts
          if [ "$total_count" -gt 0 ]; then
            echo "Found $total_count artifacts. Downloading..."
            echo "$artifacts_resp" | jq -c '.artifacts[]' | while read -r a; do
              id=$(echo "$a" | jq -r '.id')
              name=$(echo "$a" | jq -r '.name')
              out="artifacts/${name}.zip"
              url="$API/repos/$OWNER/$REPO/actions/artifacts/$id/zip"
              echo "Downloading artifact $name (id=$id) -> $out"
              if [ -n "$TOKEN" ]; then
                curl -sL -H "Authorization: token $TOKEN" -o "$out" "$url"
              else
                curl -sL -o "$out" "$url"
              fi
            done
          else
            echo "No artifacts for this run."
          fi

          # 下载源码 zip（以 commit sha）
          if [ -n "$head_sha" ]; then
            echo "Downloading source zip for commit $head_sha..."
            src_out="source-${head_sha}.zip"
            src_url="$API/repos/$OWNER/$REPO/zipball/$head_sha"
            if [ -n "$TOKEN" ]; then
              curl -sL -H "Authorization: token $TOKEN" -o "$src_out" "$src_url"
            else
              curl -sL -o "$src_out" "$src_url"
            fi
          else
            echo "Warning: head_sha is empty; skipping source download."
            src_out=""
          fi

          # 在当前仓库创建 release 并上传资产
          tag="source-run-${run_id}"
          release_name="Import: ${OWNER}/${REPO} run #${run_number}"
          release_body="Imported workflow run ${run_id} from ${OWNER}/${REPO}\n\nRun name: ${run_name}\nRun number: ${run_number}\nCommit: ${head_sha}\nCreated at: ${created_at}\n\nSource run: https://github.com/${OWNER}/${REPO}/actions/runs/${run_id}"
          echo "Creating release $tag in $TARGET_REPO ..."

          create_resp=$(curl -s -X POST -H "Authorization: token $GHTOKEN" -H "Content-Type: application/json" \
            -d "{\"tag_name\":\"$tag\",\"name\":\"$release_name\",\"body\":\"$release_body\",\"prerelease\":false}" \
            "$API/repos/$TARGET_REPO/releases")

          upload_url=$(echo "$create_resp" | jq -r '.upload_url // empty' | sed -e "s/{?name,label}//")
          if [ -z "$upload_url" ]; then
            echo "Failed to create release. Response:"
            echo "$create_resp" | jq -r '.' || echo "$create_resp"
            exit 1
          fi

          echo "Release created. upload_url=$upload_url"

          # 上传 artifact 文件（如果有）
          if compgen -G "artifacts/*.zip" > /dev/null; then
            for f in artifacts/*.zip; do
              [ -f "$f" ] || continue
              fname=$(basename "$f")
              echo "Uploading asset $fname ..."
              curl -s -X POST -H "Authorization: token $GHTOKEN" -H "Content-Type: application/zip" --data-binary @"$f" "$upload_url?name=$fname" >/dev/null
            done
          fi

          # 上传源码 zip（如果已下载）
          if [ -n "${src_out:-}" ] && [ -f "$src_out" ]; then
            src_name=$(basename "$src_out")
            echo "Uploading source asset $src_name ..."
            curl -s -X POST -H "Authorization: token $GHTOKEN" -H "Content-Type: application/zip" --data-binary @"$src_out" "$upload_url?name=$src_name" >/dev/null
          fi

          # 记录最后处理的 run_id，提交回仓库
          echo "$run_id" > "$LAST_FILE"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$LAST_FILE" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Record last released source run $run_id" || true
            BRANCH=$(echo "$GITHUB_REF" | sed 's|refs/heads/||' )
            # 推送回触发工作流的分支（如果可能）
            git push origin "HEAD:$BRANCH" || true
          fi

          echo "Done. Released run $run_id as release tag $tag."
